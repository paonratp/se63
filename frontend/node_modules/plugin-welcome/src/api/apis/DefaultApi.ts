/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersHistorytaking,
    ControllersHistorytakingFromJSON,
    ControllersHistorytakingToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntHistorytaking,
    EntHistorytakingFromJSON,
    EntHistorytakingToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntPatientrecord,
    EntPatientrecordFromJSON,
    EntPatientrecordToJSON,
    EntSymptomseverity,
    EntSymptomseverityFromJSON,
    EntSymptomseverityToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateHistorytakingRequest {
    historytaking: ControllersHistorytaking;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreatePatientrecordRequest {
    patientrecord: EntPatientrecord;
}

export interface CreateSymptomseverityRequest {
    symptomseverity: EntSymptomseverity;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteNurseRequest {
    id: number;
}

export interface DeletePatientrecordRequest {
    id: number;
}

export interface DeleteSymptomseverityRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetHistorytakingRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetPatientrecordRequest {
    id: number;
}

export interface GetSymptomseverityRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListHistorytakingRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrecordRequest {
    limit?: number;
    offset?: number;
}

export interface ListSymptomseverityRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateNurseRequest {
    id: number;
    nurse: EntNurse;
}

export interface UpdatePatientrecordRequest {
    id: number;
    patientrecord: EntPatientrecord;
}

export interface UpdateSymptomseverityRequest {
    id: number;
    symptomseverity: EntSymptomseverity;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/department`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create historytaking
     * Create historytaking
     */
    async createHistorytakingRaw(requestParameters: CreateHistorytakingRequest): Promise<runtime.ApiResponse<EntHistorytaking>> {
        if (requestParameters.historytaking === null || requestParameters.historytaking === undefined) {
            throw new runtime.RequiredError('historytaking','Required parameter requestParameters.historytaking was null or undefined when calling createHistorytaking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/historytaking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersHistorytakingToJSON(requestParameters.historytaking),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHistorytakingFromJSON(jsonValue));
    }

    /**
     * Create historytaking
     * Create historytaking
     */
    async createHistorytaking(requestParameters: CreateHistorytakingRequest): Promise<EntHistorytaking> {
        const response = await this.createHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecordRaw(requestParameters: CreatePatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.patientrecord === null || requestParameters.patientrecord === undefined) {
            throw new runtime.RequiredError('patientrecord','Required parameter requestParameters.patientrecord was null or undefined when calling createPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrecordToJSON(requestParameters.patientrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecord(requestParameters: CreatePatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.createPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create symptomseverity
     * Create symptomseverity
     */
    async createSymptomseverityRaw(requestParameters: CreateSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.symptomseverity === null || requestParameters.symptomseverity === undefined) {
            throw new runtime.RequiredError('symptomseverity','Required parameter requestParameters.symptomseverity was null or undefined when calling createSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/symptomseverity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomseverityToJSON(requestParameters.symptomseverity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * Create symptomseverity
     * Create symptomseverity
     */
    async createSymptomseverity(requestParameters: CreateSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.createSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurseRaw(requestParameters: DeleteNurseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurse(requestParameters: DeleteNurseRequest): Promise<object> {
        const response = await this.deleteNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrecord by ID
     * Delete a patientrecord entity by ID
     */
    async deletePatientrecordRaw(requestParameters: DeletePatientrecordRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrecord by ID
     * Delete a patientrecord entity by ID
     */
    async deletePatientrecord(requestParameters: DeletePatientrecordRequest): Promise<object> {
        const response = await this.deletePatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptomseverity by ID
     * Delete a symptomseverity entity by ID
     */
    async deleteSymptomseverityRaw(requestParameters: DeleteSymptomseverityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get symptomseverity by ID
     * Delete a symptomseverity entity by ID
     */
    async deleteSymptomseverity(requestParameters: DeleteSymptomseverityRequest): Promise<object> {
        const response = await this.deleteSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get historytaking by ID
     * Get a historytaking entity by ID
     */
    async getHistorytakingRaw(requestParameters: GetHistorytakingRequest): Promise<runtime.ApiResponse<EntHistorytaking>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHistorytaking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/historytaking/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHistorytakingFromJSON(jsonValue));
    }

    /**
     * get historytaking by ID
     * Get a historytaking entity by ID
     */
    async getHistorytaking(requestParameters: GetHistorytakingRequest): Promise<EntHistorytaking> {
        const response = await this.getHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecordRaw(requestParameters: GetPatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecord(requestParameters: GetPatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.getPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptomseverity by ID
     * Get a symptomseverity entity by ID
     */
    async getSymptomseverityRaw(requestParameters: GetSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * get symptomseverity by ID
     * Get a symptomseverity entity by ID
     */
    async getSymptomseverity(requestParameters: GetSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.getSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list historytaking entities
     * List historytaking entities
     */
    async listHistorytakingRaw(requestParameters: ListHistorytakingRequest): Promise<runtime.ApiResponse<Array<EntHistorytaking>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/historytaking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntHistorytakingFromJSON));
    }

    /**
     * list historytaking entities
     * List historytaking entities
     */
    async listHistorytaking(requestParameters: ListHistorytakingRequest): Promise<Array<EntHistorytaking>> {
        const response = await this.listHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecordRaw(requestParameters: ListPatientrecordRequest): Promise<runtime.ApiResponse<Array<EntPatientrecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrecordFromJSON));
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecord(requestParameters: ListPatientrecordRequest): Promise<Array<EntPatientrecord>> {
        const response = await this.listPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * list symptomseverity entities
     * List symptomseverity entities
     */
    async listSymptomseverityRaw(requestParameters: ListSymptomseverityRequest): Promise<runtime.ApiResponse<Array<EntSymptomseverity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSymptomseverityFromJSON));
    }

    /**
     * list symptomseverity entities
     * List symptomseverity entities
     */
    async listSymptomseverity(requestParameters: ListSymptomseverityRequest): Promise<Array<EntSymptomseverity>> {
        const response = await this.listSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurseRaw(requestParameters: UpdateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNurse.');
        }

        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling updateNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurse(requestParameters: UpdateNurseRequest): Promise<EntNurse> {
        const response = await this.updateNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientrecord by ID
     * Update a patientrecord entity by ID
     */
    async updatePatientrecordRaw(requestParameters: UpdatePatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientrecord.');
        }

        if (requestParameters.patientrecord === null || requestParameters.patientrecord === undefined) {
            throw new runtime.RequiredError('patientrecord','Required parameter requestParameters.patientrecord was null or undefined when calling updatePatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrecordToJSON(requestParameters.patientrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * update patientrecord by ID
     * Update a patientrecord entity by ID
     */
    async updatePatientrecord(requestParameters: UpdatePatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.updatePatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * update symptomseverity by ID
     * Update a symptomseverity entity by ID
     */
    async updateSymptomseverityRaw(requestParameters: UpdateSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSymptomseverity.');
        }

        if (requestParameters.symptomseverity === null || requestParameters.symptomseverity === undefined) {
            throw new runtime.RequiredError('symptomseverity','Required parameter requestParameters.symptomseverity was null or undefined when calling updateSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomseverityToJSON(requestParameters.symptomseverity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * update symptomseverity by ID
     * Update a symptomseverity entity by ID
     */
    async updateSymptomseverity(requestParameters: UpdateSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.updateSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
