basePath: /api/v1
definitions:
  controllers.Historytaking:
    properties:
      bp:
        type: string
      datetime:
        type: string
      department:
        type: integer
      hight:
        type: string
      nurse:
        type: integer
      oxygen:
        type: string
      patientrecord:
        type: integer
      pulse:
        type: string
      respiration:
        type: string
      symptom:
        type: string
      symptomseverity:
        type: integer
      temp:
        type: string
      weight:
        type: string
    type: object
  ent.Department:
    properties:
      department:
        description: Department holds the value of the "department" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DepartmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DepartmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DepartmentEdges:
    properties:
      historytaking:
        description: Historytaking holds the value of the historytaking edge.
        items:
          $ref: '#/definitions/ent.Historytaking'
        type: array
    type: object
  ent.Historytaking:
    properties:
      bp:
        description: Bp holds the value of the "bp" field.
        type: integer
      datetime:
        description: Datetime holds the value of the "datetime" field.
        type: string
      edges:
        $ref: '#/definitions/ent.HistorytakingEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the HistorytakingQuery when eager-loading is set.
        type: object
      hight:
        description: Hight holds the value of the "hight" field.
        type: number
      id:
        description: ID of the ent.
        type: integer
      oxygen:
        description: Oxygen holds the value of the "oxygen" field.
        type: string
      pulse:
        description: Pulse holds the value of the "pulse" field.
        type: integer
      respiration:
        description: Respiration holds the value of the "respiration" field.
        type: integer
      symptom:
        description: Symptom holds the value of the "symptom" field.
        type: string
      temp:
        description: Temp holds the value of the "temp" field.
        type: number
      weight:
        description: Weight holds the value of the "weight" field.
        type: number
    type: object
  ent.HistorytakingEdges:
    properties:
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      nurse:
        $ref: '#/definitions/ent.Nurse'
        description: Nurse holds the value of the nurse edge.
        type: object
      patientrecord:
        $ref: '#/definitions/ent.Patientrecord'
        description: Patientrecord holds the value of the patientrecord edge.
        type: object
      symptomseverity:
        $ref: '#/definitions/ent.Symptomseverity'
        description: Symptomseverity holds the value of the symptomseverity edge.
        type: object
    type: object
  ent.Nurse:
    properties:
      edges:
        $ref: '#/definitions/ent.NurseEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the NurseQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      nursinglicense:
        description: Nursinglicense holds the value of the "nursinglicense" field.
        type: string
      position:
        description: Position holds the value of the "position" field.
        type: string
    type: object
  ent.NurseEdges:
    properties:
      historytaking:
        description: Historytaking holds the value of the historytaking edge.
        items:
          $ref: '#/definitions/ent.Historytaking'
        type: array
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.Patientrecord:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PatientrecordEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PatientrecordQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PatientrecordEdges:
    properties:
      historytaking:
        description: Historytaking holds the value of the historytaking edge.
        items:
          $ref: '#/definitions/ent.Historytaking'
        type: array
    type: object
  ent.Symptomseverity:
    properties:
      edges:
        $ref: '#/definitions/ent.SymptomseverityEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the SymptomseverityQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      symptomseverity:
        description: Symptomseverity holds the value of the "symptomseverity" field.
        type: string
    type: object
  ent.SymptomseverityEdges:
    properties:
      historytaking:
        description: Historytaking holds the value of the historytaking edge.
        items:
          $ref: '#/definitions/ent.Historytaking'
        type: array
    type: object
  ent.User:
    properties:
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      password:
        description: Password holds the value of the "password" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      historytaking:
        $ref: '#/definitions/ent.Nurse'
        description: Historytaking holds the value of the historytaking edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /department:
    get:
      description: list department entities
      operationId: list-department
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Department'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List department entities
    post:
      consumes:
      - application/json
      description: Create department
      operationId: create-department
      parameters:
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create department
  /department/{id}:
    delete:
      description: get department by ID
      operationId: delete-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a department entity by ID
    get:
      description: get department by ID
      operationId: get-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a department entity by ID
    put:
      consumes:
      - application/json
      description: update department by ID
      operationId: update-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a department entity by ID
  /historytaking:
    get:
      description: list historytaking entities
      operationId: list-historytaking
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Historytaking'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List historytaking entities
    post:
      consumes:
      - application/json
      description: Create historytaking
      operationId: create-historytaking
      parameters:
      - description: Historytaking entity
        in: body
        name: historytaking
        required: true
        schema:
          $ref: '#/definitions/controllers.Historytaking'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Historytaking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create historytaking
  /historytaking/{id}:
    get:
      description: get historytaking by ID
      operationId: get-historytaking
      parameters:
      - description: Historytaking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Historytaking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a historytaking entity by ID
  /historytakings/{id}:
    delete:
      description: get historytaking by ID
      operationId: delete-historytaking
      parameters:
      - description: Historytaking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a historytaking entity by ID
  /nurse:
    get:
      description: list nurse entities
      operationId: list-nurse
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Nurse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List nurse entities
    post:
      consumes:
      - application/json
      description: Create nurse
      operationId: create-nurse
      parameters:
      - description: Nurse entity
        in: body
        name: nurse
        required: true
        schema:
          $ref: '#/definitions/ent.Nurse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nurse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create nurse
  /nurse/{id}:
    delete:
      description: get nurse by ID
      operationId: delete-nurse
      parameters:
      - description: Nurse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a nurse entity by ID
    get:
      description: get nurse by ID
      operationId: get-nurse
      parameters:
      - description: Nurse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nurse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a nurse entity by ID
    put:
      consumes:
      - application/json
      description: update nurse by ID
      operationId: update-nurse
      parameters:
      - description: Nurse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Nurse entity
        in: body
        name: nurse
        required: true
        schema:
          $ref: '#/definitions/ent.Nurse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nurse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a nurse entity by ID
  /patientrecords:
    get:
      description: list patientrecord entities
      operationId: list-patientrecord
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Patientrecord'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List patientrecord entities
    post:
      consumes:
      - application/json
      description: Create patientrecord
      operationId: create-patientrecord
      parameters:
      - description: Patientrecord entity
        in: body
        name: patientrecord
        required: true
        schema:
          $ref: '#/definitions/ent.Patientrecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientrecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create patientrecord
  /patientrecords/{id}:
    delete:
      description: get patientrecord by ID
      operationId: delete-patientrecord
      parameters:
      - description: Patientrecord ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a patientrecord entity by ID
    get:
      description: get patientrecord by ID
      operationId: get-patientrecord
      parameters:
      - description: Patientrecord ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientrecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a patientrecord entity by ID
    put:
      consumes:
      - application/json
      description: update patientrecord by ID
      operationId: update-patientrecord
      parameters:
      - description: Patientrecord ID
        in: path
        name: id
        required: true
        type: integer
      - description: Patientrecord entity
        in: body
        name: patientrecord
        required: true
        schema:
          $ref: '#/definitions/ent.Patientrecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientrecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a patientrecord entity by ID
  /symptomseverity:
    get:
      description: list symptomseverity entities
      operationId: list-symptomseverity
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Symptomseverity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List symptomseverity entities
    post:
      consumes:
      - application/json
      description: Create symptomseverity
      operationId: create-symptomseverity
      parameters:
      - description: Symptomseverity entity
        in: body
        name: symptomseverity
        required: true
        schema:
          $ref: '#/definitions/ent.Symptomseverity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Symptomseverity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create symptomseverity
  /symptomseverity/{id}:
    delete:
      description: get symptomseverity by ID
      operationId: delete-symptomseverity
      parameters:
      - description: Symptomseverity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a symptomseverity entity by ID
    get:
      description: get symptomseverity by ID
      operationId: get-symptomseverity
      parameters:
      - description: Symptomseverity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Symptomseverity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a symptomseverity entity by ID
    put:
      consumes:
      - application/json
      description: update symptomseverity by ID
      operationId: update-symptomseverity
      parameters:
      - description: Symptomseverity ID
        in: path
        name: id
        required: true
        type: integer
      - description: Symptomseverity entity
        in: body
        name: symptomseverity
        required: true
        schema:
          $ref: '#/definitions/ent.Symptomseverity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Symptomseverity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a symptomseverity entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
