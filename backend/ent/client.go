// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team10/app/ent/migrate"

	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/symptomseverity"
	"github.com/team10/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Historytaking is the client for interacting with the Historytaking builders.
	Historytaking *HistorytakingClient
	// Nurse is the client for interacting with the Nurse builders.
	Nurse *NurseClient
	// Patientrecord is the client for interacting with the Patientrecord builders.
	Patientrecord *PatientrecordClient
	// Symptomseverity is the client for interacting with the Symptomseverity builders.
	Symptomseverity *SymptomseverityClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Department = NewDepartmentClient(c.config)
	c.Historytaking = NewHistorytakingClient(c.config)
	c.Nurse = NewNurseClient(c.config)
	c.Patientrecord = NewPatientrecordClient(c.config)
	c.Symptomseverity = NewSymptomseverityClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Department:      NewDepartmentClient(cfg),
		Historytaking:   NewHistorytakingClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Patientrecord:   NewPatientrecordClient(cfg),
		Symptomseverity: NewSymptomseverityClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Department:      NewDepartmentClient(cfg),
		Historytaking:   NewHistorytakingClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Patientrecord:   NewPatientrecordClient(cfg),
		Symptomseverity: NewSymptomseverityClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Department.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Department.Use(hooks...)
	c.Historytaking.Use(hooks...)
	c.Nurse.Use(hooks...)
	c.Patientrecord.Use(hooks...)
	c.Symptomseverity.Use(hooks...)
	c.User.Use(hooks...)
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryHistorytaking queries the historytaking edge of a Department.
func (c *DepartmentClient) QueryHistorytaking(d *Department) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.HistorytakingTable, department.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// HistorytakingClient is a client for the Historytaking schema.
type HistorytakingClient struct {
	config
}

// NewHistorytakingClient returns a client for the Historytaking from the given config.
func NewHistorytakingClient(c config) *HistorytakingClient {
	return &HistorytakingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `historytaking.Hooks(f(g(h())))`.
func (c *HistorytakingClient) Use(hooks ...Hook) {
	c.hooks.Historytaking = append(c.hooks.Historytaking, hooks...)
}

// Create returns a create builder for Historytaking.
func (c *HistorytakingClient) Create() *HistorytakingCreate {
	mutation := newHistorytakingMutation(c.config, OpCreate)
	return &HistorytakingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Historytaking.
func (c *HistorytakingClient) Update() *HistorytakingUpdate {
	mutation := newHistorytakingMutation(c.config, OpUpdate)
	return &HistorytakingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistorytakingClient) UpdateOne(h *Historytaking) *HistorytakingUpdateOne {
	mutation := newHistorytakingMutation(c.config, OpUpdateOne, withHistorytaking(h))
	return &HistorytakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistorytakingClient) UpdateOneID(id int) *HistorytakingUpdateOne {
	mutation := newHistorytakingMutation(c.config, OpUpdateOne, withHistorytakingID(id))
	return &HistorytakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Historytaking.
func (c *HistorytakingClient) Delete() *HistorytakingDelete {
	mutation := newHistorytakingMutation(c.config, OpDelete)
	return &HistorytakingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HistorytakingClient) DeleteOne(h *Historytaking) *HistorytakingDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HistorytakingClient) DeleteOneID(id int) *HistorytakingDeleteOne {
	builder := c.Delete().Where(historytaking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistorytakingDeleteOne{builder}
}

// Create returns a query builder for Historytaking.
func (c *HistorytakingClient) Query() *HistorytakingQuery {
	return &HistorytakingQuery{config: c.config}
}

// Get returns a Historytaking entity by its id.
func (c *HistorytakingClient) Get(ctx context.Context, id int) (*Historytaking, error) {
	return c.Query().Where(historytaking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistorytakingClient) GetX(ctx context.Context, id int) *Historytaking {
	h, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return h
}

// QueryNurse queries the nurse edge of a Historytaking.
func (c *HistorytakingClient) QueryNurse(h *Historytaking) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.NurseTable, historytaking.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Historytaking.
func (c *HistorytakingClient) QueryDepartment(h *Historytaking) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.DepartmentTable, historytaking.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySymptomseverity queries the symptomseverity edge of a Historytaking.
func (c *HistorytakingClient) QuerySymptomseverity(h *Historytaking) *SymptomseverityQuery {
	query := &SymptomseverityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(symptomseverity.Table, symptomseverity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.SymptomseverityTable, historytaking.SymptomseverityColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrecord queries the patientrecord edge of a Historytaking.
func (c *HistorytakingClient) QueryPatientrecord(h *Historytaking) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.PatientrecordTable, historytaking.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HistorytakingClient) Hooks() []Hook {
	return c.hooks.Historytaking
}

// NurseClient is a client for the Nurse schema.
type NurseClient struct {
	config
}

// NewNurseClient returns a client for the Nurse from the given config.
func NewNurseClient(c config) *NurseClient {
	return &NurseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nurse.Hooks(f(g(h())))`.
func (c *NurseClient) Use(hooks ...Hook) {
	c.hooks.Nurse = append(c.hooks.Nurse, hooks...)
}

// Create returns a create builder for Nurse.
func (c *NurseClient) Create() *NurseCreate {
	mutation := newNurseMutation(c.config, OpCreate)
	return &NurseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nurse.
func (c *NurseClient) Update() *NurseUpdate {
	mutation := newNurseMutation(c.config, OpUpdate)
	return &NurseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseClient) UpdateOne(n *Nurse) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurse(n))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseClient) UpdateOneID(id int) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurseID(id))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nurse.
func (c *NurseClient) Delete() *NurseDelete {
	mutation := newNurseMutation(c.config, OpDelete)
	return &NurseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NurseClient) DeleteOne(n *Nurse) *NurseDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NurseClient) DeleteOneID(id int) *NurseDeleteOne {
	builder := c.Delete().Where(nurse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseDeleteOne{builder}
}

// Create returns a query builder for Nurse.
func (c *NurseClient) Query() *NurseQuery {
	return &NurseQuery{config: c.config}
}

// Get returns a Nurse entity by its id.
func (c *NurseClient) Get(ctx context.Context, id int) (*Nurse, error) {
	return c.Query().Where(nurse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseClient) GetX(ctx context.Context, id int) *Nurse {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryHistorytaking queries the historytaking edge of a Nurse.
func (c *NurseClient) QueryHistorytaking(n *Nurse) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.HistorytakingTable, nurse.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Nurse.
func (c *NurseClient) QueryUser(n *Nurse) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, nurse.UserTable, nurse.UserColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseClient) Hooks() []Hook {
	return c.hooks.Nurse
}

// PatientrecordClient is a client for the Patientrecord schema.
type PatientrecordClient struct {
	config
}

// NewPatientrecordClient returns a client for the Patientrecord from the given config.
func NewPatientrecordClient(c config) *PatientrecordClient {
	return &PatientrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrecord.Hooks(f(g(h())))`.
func (c *PatientrecordClient) Use(hooks ...Hook) {
	c.hooks.Patientrecord = append(c.hooks.Patientrecord, hooks...)
}

// Create returns a create builder for Patientrecord.
func (c *PatientrecordClient) Create() *PatientrecordCreate {
	mutation := newPatientrecordMutation(c.config, OpCreate)
	return &PatientrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrecord.
func (c *PatientrecordClient) Update() *PatientrecordUpdate {
	mutation := newPatientrecordMutation(c.config, OpUpdate)
	return &PatientrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrecordClient) UpdateOne(pa *Patientrecord) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecord(pa))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrecordClient) UpdateOneID(id int) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecordID(id))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrecord.
func (c *PatientrecordClient) Delete() *PatientrecordDelete {
	mutation := newPatientrecordMutation(c.config, OpDelete)
	return &PatientrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrecordClient) DeleteOne(pa *Patientrecord) *PatientrecordDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrecordClient) DeleteOneID(id int) *PatientrecordDeleteOne {
	builder := c.Delete().Where(patientrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrecordDeleteOne{builder}
}

// Create returns a query builder for Patientrecord.
func (c *PatientrecordClient) Query() *PatientrecordQuery {
	return &PatientrecordQuery{config: c.config}
}

// Get returns a Patientrecord entity by its id.
func (c *PatientrecordClient) Get(ctx context.Context, id int) (*Patientrecord, error) {
	return c.Query().Where(patientrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrecordClient) GetX(ctx context.Context, id int) *Patientrecord {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryHistorytaking queries the historytaking edge of a Patientrecord.
func (c *PatientrecordClient) QueryHistorytaking(pa *Patientrecord) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrecord.HistorytakingTable, patientrecord.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrecordClient) Hooks() []Hook {
	return c.hooks.Patientrecord
}

// SymptomseverityClient is a client for the Symptomseverity schema.
type SymptomseverityClient struct {
	config
}

// NewSymptomseverityClient returns a client for the Symptomseverity from the given config.
func NewSymptomseverityClient(c config) *SymptomseverityClient {
	return &SymptomseverityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `symptomseverity.Hooks(f(g(h())))`.
func (c *SymptomseverityClient) Use(hooks ...Hook) {
	c.hooks.Symptomseverity = append(c.hooks.Symptomseverity, hooks...)
}

// Create returns a create builder for Symptomseverity.
func (c *SymptomseverityClient) Create() *SymptomseverityCreate {
	mutation := newSymptomseverityMutation(c.config, OpCreate)
	return &SymptomseverityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Symptomseverity.
func (c *SymptomseverityClient) Update() *SymptomseverityUpdate {
	mutation := newSymptomseverityMutation(c.config, OpUpdate)
	return &SymptomseverityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SymptomseverityClient) UpdateOne(s *Symptomseverity) *SymptomseverityUpdateOne {
	mutation := newSymptomseverityMutation(c.config, OpUpdateOne, withSymptomseverity(s))
	return &SymptomseverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SymptomseverityClient) UpdateOneID(id int) *SymptomseverityUpdateOne {
	mutation := newSymptomseverityMutation(c.config, OpUpdateOne, withSymptomseverityID(id))
	return &SymptomseverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Symptomseverity.
func (c *SymptomseverityClient) Delete() *SymptomseverityDelete {
	mutation := newSymptomseverityMutation(c.config, OpDelete)
	return &SymptomseverityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SymptomseverityClient) DeleteOne(s *Symptomseverity) *SymptomseverityDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SymptomseverityClient) DeleteOneID(id int) *SymptomseverityDeleteOne {
	builder := c.Delete().Where(symptomseverity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SymptomseverityDeleteOne{builder}
}

// Create returns a query builder for Symptomseverity.
func (c *SymptomseverityClient) Query() *SymptomseverityQuery {
	return &SymptomseverityQuery{config: c.config}
}

// Get returns a Symptomseverity entity by its id.
func (c *SymptomseverityClient) Get(ctx context.Context, id int) (*Symptomseverity, error) {
	return c.Query().Where(symptomseverity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SymptomseverityClient) GetX(ctx context.Context, id int) *Symptomseverity {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryHistorytaking queries the historytaking edge of a Symptomseverity.
func (c *SymptomseverityClient) QueryHistorytaking(s *Symptomseverity) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(symptomseverity.Table, symptomseverity.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, symptomseverity.HistorytakingTable, symptomseverity.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SymptomseverityClient) Hooks() []Hook {
	return c.hooks.Symptomseverity
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryHistorytaking queries the historytaking edge of a User.
func (c *UserClient) QueryHistorytaking(u *User) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.HistorytakingTable, user.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
